BootLoader与内核的交互
	BootLoader和内核的交互是单向的, BootLoader将各类参数传给内核. 由于它们不能同时运行, 所以传递办法只有一个: BootLoader将参数放在某个约定的地点, 再启动内核, 内核启动后从这地方获得参数.

	除了约定好参数存放的地址外, 还要规定参数的结构.
	linux2.4.x以后的内核都期望以标记列表(tagged list)的形式来传递启动参数.  标记, 就是一种数据结构; 标记列表, 就是挨着存放的多个标记. 标记列表以标记ATAG_CORE开始, 以标记ATAG_NONE结束.
	标记的数据结构为tag, 由一个tag_header结构和一个联合union组成:
		include/asm/setup.h:
		struct tag_header {  /* 表示标记的类型和长度 */
			u32	size;	//类型, 比如表示的是内存还是表示命令行参数等
			u32	tag;	//长度
		}
		struct tag {
			struct tag_header hdr;
			union {	//表示不同类型标记使用不同的联合union
				struct tag_core			core;
				struct tag_mem32		mem;			//表示内存
				struct tag_videotext	videotext;
				struct tag_ramdisk		ramdisk;
				struct tag_initrd			initrd;
				struct tag_serialnr		serialnr;
				struct tag_revision		revision;
				struct tag_videolfb	videolfb;
				struct tag_cmdline		cmdline;		//表示命令行
				
				/*	Acorn specific */
				struct tag_acorn 		acorn;
				/* DC21285 */
				struct tag_memclk		memclk;
			}
		}
	
